{
  "rules": {
    ".read": false,
    ".write": false,
    "rooms": {
      ".read": false,
      "$roomId": {
        ".read": "auth != null",
        ".write": "auth != null && newData.getPriority() == null && ((!data.exists() && newData.exists()) || (data.exists() && newData.exists()) || (data.exists() && !newData.exists() && (root.child('rooms/'+$roomId+'/owner').val() === auth.uid || root.child('rooms/'+$roomId+'/guest').val() === auth.uid)))",
        ".validate": "newData.hasChildren(['room_id','owner','created_at','updated_at']) && newData.child('room_id').isString() && newData.child('owner').isString() && newData.child('created_at').exists() && newData.child('updated_at').exists()",
        "room_id": {
          ".validate": "newData.isString() && ((!data.exists() && newData.val().matches(/^[A-Za-z0-9_-]{4,50}$/)) || (data.exists() && newData.val() === data.val()))"
        },
        "owner": {
          ".validate": "newData.isString() && ((!data.exists() && newData.val() === auth.uid) || (data.exists() && newData.val() === data.val()))"
        },
        "guest": {
          ".write": "auth != null && !data.exists() && newData.isString() && newData.val() === auth.uid && root.child('rooms/'+$roomId+'/owner').val() != auth.uid",
          ".validate": "newData.isString()"
        },
        "created_at": {
          ".validate": "(!data.exists() && (newData.val() == now || newData.isNumber())) || (data.exists() && newData.val() === data.val())"
        },
        "updated_at": {
          ".write": "auth != null && ( root.child('rooms/'+$roomId+'/owner').val() === auth.uid || root.child('rooms/'+$roomId+'/guest').val() === auth.uid || newData.parent().child('guest').val() === auth.uid)",
          ".validate": "(newData.val() == now || newData.isNumber()) && (!data.exists() || (newData.isNumber() && newData.val() >= data.val()))"
        },
        "dh": {
          ".read": "auth != null && (root.child('rooms/'+$roomId+'/owner').val() === auth.uid || root.child('rooms/'+$roomId+'/guest').val() === auth.uid)",
          ".write": false,
          "owner": {
            ".write": "auth != null && root.child('rooms/'+$roomId+'/owner').val() === auth.uid && !data.exists()",
            ".validate": "newData.hasChildren(['msg_b64','nonce_b64','at']) && newData.child('msg_b64').isString() && newData.child('nonce_b64').isString() && newData.child('at').isNumber()"
          },
          "guest": {
            ".write": "auth != null && root.child('rooms/'+$roomId+'/guest').val() === auth.uid && !data.exists()",
            ".validate": "newData.hasChildren(['msg_b64','nonce_b64','at']) && newData.child('msg_b64').isString() && newData.child('nonce_b64').isString() && newData.child('at').isNumber()"
          },
          "mac": {
            ".write": false,
            "owner": {
              ".write": "auth != null && root.child('rooms/'+$roomId+'/owner').val() === auth.uid && !data.exists()",
              ".validate": "newData.hasChildren(['mac_b64','at']) && newData.child('mac_b64').isString() && newData.child('at').isNumber()"
            },
            "guest": {
              ".write": "auth != null && root.child('rooms/'+$roomId+'/guest').val() === auth.uid && !data.exists()",
              ".validate": "newData.hasChildren(['mac_b64','at']) && newData.child('mac_b64').isString() && newData.child('at').isNumber()"
            }
          },
          "status": {
            ".write": "auth != null && (root.child('rooms/'+$roomId+'/owner').val() === auth.uid || root.child('rooms/'+$roomId+'/guest').val() === auth.uid) && !data.exists()",
            ".validate": "(newData.hasChildren(['ok','at']) && newData.child('ok').val() === true && newData.child('at').isNumber()) || (newData.hasChildren(['error','at']) && newData.child('error').isString() && newData.child('at').isNumber())"
          },
          "$other": { ".validate": false }
        },
        "webrtc": {
          ".read": "auth != null && (root.child('rooms/'+$roomId+'/owner').val() === auth.uid || root.child('rooms/'+$roomId+'/guest').val() === auth.uid)",
          ".write": false,
          "offer": {
            "owner": {
              ".write": "auth != null && root.child('rooms/'+$roomId+'/owner').val() === auth.uid && !data.exists()",
              ".validate": "newData.hasChildren(['msg_b64','nonce_b64']) && newData.child('msg_b64').isString() && newData.child('msg_b64').val().matches(/^[-_A-Za-z0-9]+$/) && newData.child('nonce_b64').isString() && newData.child('nonce_b64').val().matches(/^[-_A-Za-z0-9]{8,64}$/)"
            },
            "guest": { ".write": false, ".validate": "newData.val() === data.val()" }
          },
          "answer": {
            "guest": {
              ".write": "auth != null && root.child('rooms/'+$roomId+'/guest').val() === auth.uid && !data.exists()",
              ".validate": "newData.hasChildren(['msg_b64','nonce_b64']) && newData.child('msg_b64').isString() && newData.child('msg_b64').val().matches(/^[A-Za-z0-9_-]+$/) && newData.child('nonce_b64').isString() && newData.child('nonce_b64').val().matches(/^[-_A-Za-z0-9]{8,64}$/)"
            },
            "owner": { ".write": false, ".validate": "newData.val() === data.val()" }
          },
          "candidates": {
            "owner": {
              "$cid": {
                ".write": "auth != null && root.child('rooms/'+$roomId+'/owner').val() === auth.uid && !data.exists() && newData.exists()",
                ".validate": "newData.hasChildren(['msg_b64','nonce_b64']) && newData.child('msg_b64').isString() && newData.child('msg_b64').val().matches(/^[A-Za-z0-9_-]+$/) && newData.child('nonce_b64').isString() && newData.child('nonce_b64').val().matches(/^[-_A-Za-z0-9]{8,64}$/) && !newData.child('extra').exists()"
              }
            },
            "guest": {
              "$cid": {
                ".write": "auth != null && root.child('rooms/'+$roomId+'/guest').val() === auth.uid && !data.exists() && newData.exists()",
                ".validate": "newData.hasChildren(['msg_b64','nonce_b64']) && newData.child('msg_b64').isString() && newData.child('msg_b64').val().matches(/^[A-Za-z0-9_-]+$/) && newData.child('nonce_b64').isString() && newData.child('nonce_b64').val().matches(/^[-_A-Za-z0-9]{8,64}$/) && !newData.child('extra').exists()"
              }
            }
          }
        },
        "$other": { ".validate": false }
      }
    }
  }
}
